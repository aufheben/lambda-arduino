var btn_class  = ['btn-0', 'btn-1', 'btn-2', 'btn-3', 'btn-4', 'btn-5'];
var btn_colors = ['#CC6699', '#FF7F0E', '#17A697', '#3F5D7D', '2CA02C', '#993333'];
var analog_btn = ['#btn-a0', '#btn-a1', '#btn-a2', '#btn-a3', '#btn-a4', '#btn-a5'];
var analog_in  = [];
var first_time = true;
var chart;

var time_ms    = 0;
var time_range = 10000;
var ain_data   = [[], [], [], [], [], []];
var ain_keys   = ['A0', 'A1', 'A2', 'A3', 'A4', 'A5'];

function analog_clicked(event, i) {
  event.preventDefault(); // To prevent following the link (optional)

  if (first_time)
  {
    first_time = false;
    $('#chart').html('<svg style="height: 360px"></svg>');
    nv.addGraph(function() {
      chart = nv.models.lineChart()
        .useInteractiveGuideline(true)
        .showLegend(false)
        .xDomain([0, time_range])
        ;

      // ',' as thousands separator, 'r' for rounded
      chart.xAxis
        .axisLabel('Time (ms)')
        .tickFormat(d3.format(',r'))
        ;

      chart.yAxis
        .axisLabel('Voltage (v)')
        .tickFormat(d3.format('.02f'))
        ;

      d3.select('#chart svg')
        .datum(ain_datum())
        .transition().duration(500)
        .call(chart)
        ;

      nv.utils.windowResize(chart.update);

      return chart;
    });
  }

  $(analog_btn[i]).toggleClass(btn_class[i]);

  var idx = analog_in.indexOf(i);
  if (idx == -1)
  {
    analog_in.push(i);
  }
  else
  {
    analog_in.splice(idx, 1);
    ain_data[i] = [];
    $(analog_btn[i]).html('A' + i);
  }

  // console.log(analog_in);
  $.get('@{AnalogInR}' + '?pins=' + JSON.stringify(analog_in));
}

// this doesn't work because i will be 6 when the function is actually called
//
// for (var i = 0; i < analog_btn.length; i++) {
//   $(analog_btn[i]).on('click', function(event) { analog_clicked(event, i) });
// }

$('#btn-a0').on('click', function(event) { analog_clicked(event, 0) });
$('#btn-a1').on('click', function(event) { analog_clicked(event, 1) });
$('#btn-a2').on('click', function(event) { analog_clicked(event, 2) });
$('#btn-a3').on('click', function(event) { analog_clicked(event, 3) });
$('#btn-a4').on('click', function(event) { analog_clicked(event, 4) });
$('#btn-a5').on('click', function(event) { analog_clicked(event, 5) });

var interval = 100;

setInterval(function(){
    // console.log(JSON.stringify({pins : analog_in}));
    // this would convert it to JSON, but that's not the same thing as the query param

    // console.log("### $.get");
    $.get('@{AnalogReadR}' + '?pins=' + JSON.stringify(analog_in),
          function(data) {
            console.log(data);
            if (analog_in.length == 0)
              time_ms = 0;
            else
            {
              for (var i = 0; i < analog_in.length; i++) {
                var j = analog_in[i];
                var voltage = (data[i] / 1023 * 5).toFixed(2)
                $(analog_btn[j]).html(voltage);
                ain_data[j].push({x: time_ms, y: voltage});
              }

              // console.log(JSON.stringify(ain_data[0]));

              if (chart)
              {
                d3.select('#chart svg')
                  .datum(ain_datum())
                  .transition().duration(500)
                  .call(chart)
                  ;
              }

              if (time_ms == time_range)
              {
                for (var i = 0; i < analog_in.length; i++) {
                  var j = analog_in[i];
                  ain_data[j] = [];
                }
                time_ms = 0;
              }
              else
                time_ms += interval;
            }
          }
    );
  }, interval);

function ain_datum() {
  var result = []
  for (var i = 0; i < analog_in.length; i++) {
    var j = analog_in[i];
    result.push({ values: ain_data[j], key: ain_keys[j], color: btn_colors[j] });
  }
  return result;
}
